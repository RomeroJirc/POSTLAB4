
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000027c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087d  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e1  00000000  00000000  00000c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040e  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d4  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9e:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	
}


void initADC(void){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);				//REFERENCIA AVCC = 5V
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);				//JUSTIFICACIÓN A LA IZQUIERDA
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	ADMUX |= ((1<<MUX2) | (1<<MUX1));	//AL COLOCAR 0110 INDICAMOS EL ADC6 COMO EL RECEPTOR DE LA SEÑAL ANALÓGICA
  b8:	80 81       	ld	r24, Z
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE);				//HABILITaR INTERRUPCIONES DE ADC
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	//PRESCALER DE 128 ----> 125kHz
  ca:	80 81       	ld	r24, Z
  cc:	87 60       	ori	r24, 0x07	; 7
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);				//HABILITANDO EL ADC
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <initTimer1>:
	
}

void initTimer1(void){
	TCCR1B |= (1 << CS12)|(1 << CS10);		//CONFIGURAR PRESCALER DE 1024
  d8:	e1 e8       	ldi	r30, 0x81	; 129
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	85 60       	ori	r24, 0x05	; 5
  e0:	80 83       	st	Z, r24
	TCNT1 = 62411;						//CARGAR VALOR DE DESBORDAMIENTO
  e2:	8b ec       	ldi	r24, 0xCB	; 203
  e4:	93 ef       	ldi	r25, 0xF3	; 243
  e6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ea:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 |= (1 << TOIE1);
  ee:	ef e6       	ldi	r30, 0x6F	; 111
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <setup>:
		
    }
}

void setup(void){
	cli();
  fa:	f8 94       	cli
	DDRD = 0xFF; //PONER EL PORTD COMO SALIDAS
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8a b9       	out	0x0a, r24	; 10
	UCSR0B = 0;	//ACTIVAR RX Y TX COMO PINES NORMALES
 100:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PORTD &= ~(1 << PORTD0); //LIMPIAR PORTD0
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	8e 7f       	andi	r24, 0xFE	; 254
 108:	8b b9       	out	0x0b, r24	; 11
	
	DDRC  &= ~((1 << DDC1)| (1 << DDC0));	//COMO ENTRADAS 
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	8c 7f       	andi	r24, 0xFC	; 252
 10e:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC1 | 1<< PORTC0);	//ACTIVAR PULLUP
 110:	88 b1       	in	r24, 0x08	; 8
 112:	83 60       	ori	r24, 0x03	; 3
 114:	88 b9       	out	0x08, r24	; 8
	
	DDRB |= (1<<DDB1)|(1<<DDB2)|(1<<DDB3)|(1<<DDB4);	//SALIDAS
 116:	84 b1       	in	r24, 0x04	; 4
 118:	8e 61       	ori	r24, 0x1E	; 30
 11a:	84 b9       	out	0x04, r24	; 4
	
	PCMSK1 |= (1 << PCINT9)|(1 << PCINT8); //HABILITANDO PCINT EN LOS PINES PCINT9 y PCINT8
 11c:	ec e6       	ldi	r30, 0x6C	; 108
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	83 60       	ori	r24, 0x03	; 3
 124:	80 83       	st	Z, r24
	//IMPORTANTE: ESTAMOS EN LA DIRECCION DEL ISR_PCINT1 POR TENER LOS BOTONES EN EL PUERTO C

	PCICR |= (1 << PCIE1);	//HABILITANDO LA ISR PCINT[14:8]
 126:	e8 e6       	ldi	r30, 0x68	; 104
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
	initADC();
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	initTimer1();
 134:	0e 94 6c 00 	call	0xd8	; 0xd8 <initTimer1>
	sei();					//HABILITAR INTERRUPCIONES
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <main>:
void initTimer1(void);

//MAIN
int main(void)
{
    setup(); //MANDAMOS A LLAMAR A SETUP
 13c:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
    
	//LOOP PRINCIPAL
	while (1) 
    {
		
		PORTB |= (1<<PORTB3);		//ENCENDER TRANSISTOR 1
 140:	85 b1       	in	r24, 0x05	; 5
 142:	88 60       	ori	r24, 0x08	; 8
 144:	85 b9       	out	0x05, r24	; 5
		PORTD = tabla[(Receptor & 0x0F)];
 146:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 14a:	ef 70       	andi	r30, 0x0F	; 15
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	e0 50       	subi	r30, 0x00	; 0
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	80 81       	ld	r24, Z
 154:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	8f e7       	ldi	r24, 0x7F	; 127
 158:	9e e3       	ldi	r25, 0x3E	; 62
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x1e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x24>
 160:	00 00       	nop
		_delay_ms(4);
		
		PORTB &= ~(1<<PORTB3);		//APAGAR TRANSISTOR 1
 162:	85 b1       	in	r24, 0x05	; 5
 164:	87 7f       	andi	r24, 0xF7	; 247
 166:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PORTB4);		//ENCENDER TRANSISTOR 2
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	85 b9       	out	0x05, r24	; 5
		PORTD = tabla[Receptor>>4];
 16e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 172:	e2 95       	swap	r30
 174:	ef 70       	andi	r30, 0x0F	; 15
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	e0 50       	subi	r30, 0x00	; 0
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	8f e7       	ldi	r24, 0x7F	; 127
 182:	9e e3       	ldi	r25, 0x3E	; 62
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x48>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x4e>
 18a:	00 00       	nop
		_delay_ms(4);
		
		PORTB &= ~(1<<PORTB4);		//APAGAR TRANSISTOR 1
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	8f 7e       	andi	r24, 0xEF	; 239
 190:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PORTB2);		//ENCENDER TRANSISTOR 2
 192:	85 b1       	in	r24, 0x05	; 5
 194:	84 60       	ori	r24, 0x04	; 4
 196:	85 b9       	out	0x05, r24	; 5
		PORTD = contador;
 198:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <contador>
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	8f e7       	ldi	r24, 0x7F	; 127
 1a0:	9e e3       	ldi	r25, 0x3E	; 62
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x66>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x6c>
 1a8:	00 00       	nop
		_delay_ms(4);
		PORTB &= ~(1<<PORTB2);	
 1aa:	85 b1       	in	r24, 0x05	; 5
 1ac:	8b 7f       	andi	r24, 0xFB	; 251
 1ae:	85 b9       	out	0x05, r24	; 5
 1b0:	c7 cf       	rjmp	.-114    	; 0x140 <main+0x4>

000001b2 <__vector_13>:
	TCCR1B |= (1 << CS12)|(1 << CS10);		//CONFIGURAR PRESCALER DE 1024
	TCNT1 = 62411;						//CARGAR VALOR DE DESBORDAMIENTO
	TIMSK1 |= (1 << TOIE1);
}

ISR (TIMER1_OVF_vect){
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	TCNT1 = 62411;						//CARGAR VALOR DE DESBORDAMIENTO
 1c4:	8b ec       	ldi	r24, 0xCB	; 203
 1c6:	93 ef       	ldi	r25, 0xF3	; 243
 1c8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1cc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= (1 << TOV1);				//APAGAR BANDERA DEL TIMER1
 1d0:	86 b3       	in	r24, 0x16	; 22
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	86 bb       	out	0x16, r24	; 22
	ADCSRA |= (1<<ADSC);				//ADC START CONVERSION
 1d6:	ea e7       	ldi	r30, 0x7A	; 122
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 64       	ori	r24, 0x40	; 64
 1de:	80 83       	st	Z, r24
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_4>:

ISR (PCINT1_vect){
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
	
	if (PINC== 0b00000001)				//SI PC0 ESTA EN 1
 1fe:	86 b1       	in	r24, 0x06	; 6
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	31 f4       	brne	.+12     	; 0x210 <__vector_4+0x1e>
	{
		contador++;						//AUMENTAR CONTADOR
 204:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <contador>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <contador>
 20e:	08 c0       	rjmp	.+16     	; 0x220 <__vector_4+0x2e>
	}
	else if (PINC== 0b00000010)			//SI PC0 ESTA EN 1
 210:	86 b1       	in	r24, 0x06	; 6
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	29 f4       	brne	.+10     	; 0x220 <__vector_4+0x2e>
	{
		contador--;						//DECREMENTAR CONTADOR
 216:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <contador>
 21a:	81 50       	subi	r24, 0x01	; 1
 21c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <contador>
	}
	else
	{
		contador=contador;				//CONTADOR SIN CAMBIOS
	}
}
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_21>:


ISR (ADC_vect){
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	
	Receptor = ADCH;
 23e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 242:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if (Receptor>contador)
 246:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <contador>
 24a:	98 17       	cp	r25, r24
 24c:	20 f4       	brcc	.+8      	; 0x256 <__vector_21+0x2a>
	{
		PORTB |= (1<<PORTB1);
 24e:	85 b1       	in	r24, 0x05	; 5
 250:	82 60       	ori	r24, 0x02	; 2
 252:	85 b9       	out	0x05, r24	; 5
 254:	03 c0       	rjmp	.+6      	; 0x25c <__vector_21+0x30>
	}
	else
	{
		PORTB &= ~(1<<PORTB1);
 256:	85 b1       	in	r24, 0x05	; 5
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	85 b9       	out	0x05, r24	; 5
	}
	ADCSRA |= (1<<ADIF);
 25c:	ea e7       	ldi	r30, 0x7A	; 122
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 61       	ori	r24, 0x10	; 16
 264:	80 83       	st	Z, r24
	
	
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
